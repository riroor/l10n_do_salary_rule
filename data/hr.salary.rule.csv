id,code,company_id/id,category_id/id,name,amount_python_compute,condition_python,quantity,sequence,appears_on_payslip,register_id/id,amount_fix,note
hr_payroll.hr_rule_basic,BASE,base.main_company,hr_payroll.BASIC,Salario Ordinario,result = contract.wage,"
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",1,1,False,hr_payroll.contrib_register_employees,0,"Todo lo detallado a continuación queda fuera del salario ordinario o salario computable a los fines de cálculo y pago de prestaciones laborales: 
• Horas extras, según el Art. 85 del CT;
• Propina en hoteles y restaurantes, según el Art. 197 del CT;
• Salario de Navidad, según el Art. 219 del CT;
• Participación en las utilidades de la empresa, según la jurisprudencia (SCJ 7 Ago. 1956, B. J. 555, Pág. 1607; SCJ 9 Oct. 1991, B.J. 971, Pág. 1413);
• Incentivo gerencial anual, bono anual, o cualquier pago que se hace una vez por año, según la jurisprudencia (3º SCJ 18 Ago. 1999, B. J. 1065, Pág. 591);
• Viáticos y reembolso de gastos que estén soportados con la evidencia de que son auténticamente gastos en la ejecución del servicio prestado, según la jurisprudencia (SCJ 9 Mar. 1984, B. J. 880, Pág. 585; 3º SCJ 14 Jun 2000, B. J. 1075, Pág. 631);
• Uniformes, útiles y herramientas de trabajo, según la jurisprudencia (3º SCJ 29 May. 2002, B. J. 1098, Pág. 815); y
• Subsidios de la seguridad social por enfermedad, accidentes o maternidad, según la jurisprudencia (SCJ 22 Dic 1971, B. J. 733, Pág. 3439).

En cambio, sí forman parte del salario ordinario, además del sueldo fijo:
• Las comisiones pagadas regularmente, según el Art. 311 del CT;
• Cualquier salario por rendimiento pagado regularmente, bajo distintas denominaciones tales como incentivos, bonos de producción, etc., según la jurisprudencia (3º SCJ 7 Oct. 1998, B. J. 1055, Pág. 458);
• Montos fijos por mantenimiento de vehículo, según la jurisprudencia (3º SCJ 1 May. 1999, B. J. 1062, Pág. 681);
• Dietas, rentas y alimentación del trabajador, que se otorguen con carácter permanente, según la jurisprudencia (SCJ 9 Mar. 1984, B. J. 880, Pág. 585; 3º SCJ 14 Jun. 2000, B. J. 1075, Pág. 631); y
• Bonos y primas por el costo de vida y alquiler de vivienda (3º SCJ 22 May. 2002, B. J. 1098, Pág. 718)."
hr_rule_base,APAGAR,base.main_company,hr_payroll.BASIC,Salario a Pagar,"amount_to_pay = contract.wage / contract.payment_division

if bool(inputs.REAL and inputs.REAL.amount):
    result = (inputs.REAL and inputs.REAL.amount)
elif bool(inputs.DLAB and inputs.DLAB.amount):
    result = (amount_to_pay / contract.payment_division) * inputs.DLAB.amount
else:
    result = amount_to_pay",result = not bool(payslip.payslip_run_id.extraordinary),1,2,True,,0,
hr_rule_commissions,COM,base.main_company,l10n_do_salary_rule.hr_payroll_commisions_alw,Comisiones,"
if inputs_commision > 1:
    result = inputs_commision
elif move_commision > 1:
    result = move_commision","
sales_commision = inputs.COMV and inputs.COMV.amount
collection_commision = inputs.COMC and inputs.COMC.amount

inputs_commision = sales_commision  + collection_commision

com_rule = payslip.env['hr.salary.rule'].search([('code','=','COM')]).account_debit.id

move_commision = payslip.env['hr.payslip'].get_move_lines_amount(employee.address_home_id.id, com_rule, payslip.date_from, payslip.date_to, 'credit')

result = bool(sales_commision or collection_commision) or move_commision > 1
        ",1,11,True,hr_payroll.contrib_register_employees,0,
hr_rule_incentives,INC,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Incentivos,result = (inputs.INC and inputs.INC.amount),result = bool(inputs.INC and inputs.INC.amount),1,12,True,hr_payroll.contrib_register_employees,0,
hr_rule_vacations,VAC,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Vacaciones,"
last_commision = payslip.sum('COM', payslip.last_month, payslip.first_of_month) - (COM if rules.COM else 0)
last_salary = payslip.sum('BASE', payslip.last_month, payslip.first_of_month) - (BASE if rules.BASE else 0)
vacation_salary = (last_salary if last_salary > 0 else BASE) + last_commision
days_to_pay = 18 if contract.contract_time >= 60 else 14

result = ((vacation_salary / 23.83) * days_to_pay) - amount_to_pay

# TODO Se debe llevar un tracking de las vacaciones
",result = bool(inputs.VAC and inputs.VAC.amount) and not bool(payslip.payslip_run_id.extraordinary),1,13,True,hr_payroll.contrib_register_employees,0,"MT:
Las vacaciones se calculan dividiendo el importe total del salario devengado en el último
mes entre 23.83 en el caso de la jornada ordinaria o entre 26 en el caso de la jornada
intermitente, y el cociente se multiplicará por los días que le correspondan de vacaciones
al trabajador, conforme lo establecido en los artículos 177 y 180 del Código de Trabajo.

Si el salario es pagado por labor rendida se divide el importe total de los salarios devengados
durante el último año o fracción de año, entre el número de meses trabajados, y el cociente
se dividirá a su vez entre 23.83 en el caso de la jornada ordinaria o entre 26 en el caso de
la jornada intermitente, y este resultado se multiplicará por los días que le correspondan
de vacaciones al trabajador conforme al artículo 177 y 180 del Código de Trabajo.

Art. 180.:
• Trabajadores con más de cinco meses de servicios, seis días
• Trabajadores con más de seis meses de servicios, siete días
• Trabajadores con más de siete meses de servicio, ocho días
• Trabajadores con más de ocho meses de servicio, nueve días
• Trabajadores con más de nueve meses de servicio, diez días
• Trabajadores con más de diez meses de servicios, once días
• Trabajadores con más de once meses de servicios, doce días"
hr_rule_vacation_bonus,BVAC,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Bono Vacacional,result = (inputs.BVAC and inputs.BVAC.amount),result = bool(inputs.BVAC and inputs.BVAC.amount),1,13,True,hr_payroll.contrib_register_employees,0,
hr_rule_extra_hours_labor,HEL,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Horas Extra Laborables (35%),"amount_to_pay = contract.wage / contract.payment_division
result = (((amount_to_pay / days_division) / 8) * 1.35) * extra_hours
result_qty = extra_hours
result_rate = 100 / result_qty","
extra_hours = inputs.HEL and inputs.HEL.amount
result = bool(extra_hours)",1,14,True,hr_payroll.contrib_register_employees,0,"REGLAS PARA CALCULAR EL VALOR DE HORA DE TRABAJO
• SI EL SALARIO ES MENSUAL: Se divide el sueldo entre “23.83”. Este resultado se divide, a su vez, entre el número
de horas de su jornada normal, ya sea 8 horas; 6 ó 10 si está sujeta a una jornada especial

• SI EL SALARIO ES QUINCENAL: Se divide el sueldo entre “11.91”. Este resultado se divide, a su vez, entre el
número de horas de su jornada normal.

• SI EL SALARIO ES SEMANAL: Se divide el sueldo entre “5.5”. Este resultado se divide, a su vez, entre el número
de horas de su jornada normal.

• SI EL SALARIO ES DIARIO O POR LABOR RENDIDA: El salario devengado se divide entre el número de
horas de su jornada normal."
hr_rule_extra_hours_holiday,HEF,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Horas Extra Feriadas (100%),"
result = (((amount_to_pay / days_division) / 8) * 2) * holiday_hours
result_qty = holiday_hours
result_rate = 100 / result_qty","
holiday_hours = inputs.HEF and inputs.HEF.amount
result = bool(holiday_hours)",1,15,True,hr_payroll.contrib_register_employees,0,
hr_rule_extra_night_hours,HEN,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Horas Extra Nocturnas (50%),"
result = ((((amount_to_pay / days_division) / 8) * 1.50) * extra_night_hours)
result_qty = extra_night_hours
result_rate = 100 / result_qty","
extra_night_hours = inputs.HEN and inputs.HEN.amount
result = bool(extra_night_hours)",1,16,True,hr_payroll.contrib_register_employees,0,
hr_rule_night_hours,HNI,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Horas Nocturnas (15%),"
result = (((amount_to_pay / days_division) / 8) * 1.15) * night_hours
result_qty = night_hours
result_rate = 100 / result_qty","
night_hours = inputs.HNI and inputs.HNI.amount
result = bool(night_hours)",1,16,True,hr_payroll.contrib_register_employees,0,
hr_rule_bonuses,BONOS,base.main_company,l10n_do_salary_rule.hr_payroll_taxable_alw,Bonificación,result = (inputs.BONO and inputs.BONO.amount),result = bool(inputs.BONO and inputs.BONO.amount),1,17,True,hr_payroll.contrib_register_employees,0,
hr_rule_not_worked_days,NLAB,base.main_company,l10n_do_salary_rule.hr_payroll_salary_deduction,Ausencias,"
result = -(amount_to_pay / days_division) * inputs.NLAB.amount
result_qty = inputs.NLAB.amount
result_rate = 100 / result_qty",result = bool(inputs.NLAB and inputs.NLAB.amount),1,18,True,hr_payroll.contrib_register_employees,0,
hr_payroll.hr_rule_taxable,BRUTO,base.main_company,hr_payroll.GROSS,Salario Bruto,result = (APAGAR if rules.APAGAR else 0) + categories.REM - abs(categories.DDS),"
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",1,100,True,,0,
hr_rule_tss_trading,COTSS,base.main_company,l10n_do_salary_rule.hr_payroll_trading_salary,Salario Cotizable - TSS,"
tss_playslip = APAGAR + (VAC if rules.VAC else 0) + categories.COMM + (NLAB if rules.NLAB else 0)
tss_allowance_accumulation = payslip.sum('APAGAR', start_date, this_slip) + payslip.sum('VAC', start_date, this_slip) + payslip.sum('COM', start_date, this_slip) - abs(payslip.sum('NLAB', start_date, this_slip))
result = tss_playslip + tss_allowance_accumulation
",result = bool(last_payslip) and not bool(payslip.payslip_run_id.extraordinary),1,110,False,,0,
hr_rule_tss_calculated,SALTSS,base.main_company,l10n_do_salary_rule.hr_payroll_calculated_amount,Monto Calculado - TSS,"
tss_playslip = APAGAR + (VAC if rules.VAC else 0) + categories.COMM  + (NLAB if rules.NLAB else 0)
tss_allowance_accumulation = payslip.sum('APAGAR', start_date, this_slip) + payslip.sum('VAC', start_date, this_slip) + payslip.sum('COM', start_date, this_slip) - abs(payslip.sum('NLAB', start_date, this_slip))

if contract.is_end_of_month or contract.is_distributed:
    result = tss_playslip + tss_allowance_accumulation

elif contract.is_beginning_of_month:
    tss_playslip = BASE + (VAC if rules.VAC else 0) + categories.COMM + (NLAB if rules.NLAB else 0)
    result = tss_playslip","
result = (bool(contract.is_distributed) or bool(last_payslip and contract.is_end_of_month) or bool(first_payslip and contract.is_beginning_of_month)) and not bool(payslip.payslip_run_id.extraordinary)",1,120,False,,0,
hr_rule_sfs_employee,SFSE,base.main_company,l10n_do_salary_rule.hr_payroll_ss_deduction,Retención - Seguro Familiar de Salud (ARS/SFS),"
sfs_maximum = payslip.env[""hr.payslip""].get_quotation_calculation(""SFS"").value
sfs_percentage = payslip.env[""hr.payslip""].get_quotation_calculation(""SFS"").retention / 100
sfs_withholding_accumulation =  abs(payslip.sum('SFSE', start_date, this_slip))

if employee.is_naturalized:
    if SALTSS <= sfs_maximum:
        result = (SALTSS * sfs_percentage - sfs_withholding_accumulation) * -1
    else:
        result = (sfs_maximum  * sfs_percentage - sfs_withholding_accumulation) * -1
else:
    result = 0","
result = (bool(contract.is_distributed) or bool(last_payslip and contract.is_end_of_month) or bool(first_payslip and contract.is_beginning_of_month)) and not bool(payslip.payslip_run_id.extraordinary)",1,130,True,l10n_do_salary_rule.contrib_register_tss,0,
hr_rule_afp_employee,SVDSE,base.main_company,l10n_do_salary_rule.hr_payroll_ss_deduction,Retención - Fondo de Pensiones (AFP/SVDS),"
afp_maximum = payslip.env[""hr.payslip""].get_quotation_calculation(""SVDS"").value
afp_percentage = payslip.env[""hr.payslip""].get_quotation_calculation(""SVDS"").retention / 100
afp_withholding_accumulation = abs(payslip.sum('SVDSE', start_date, this_slip))

if employee.is_naturalized:
    if SALTSS <= afp_maximum:
        result = (SALTSS * afp_percentage - afp_withholding_accumulation) * -1
    else:
        result = (afp_maximum * afp_percentage - afp_withholding_accumulation) * -1
else:
    result = 0","
result = (bool(contract.is_distributed) or bool(last_payslip and contract.is_end_of_month) or bool(first_payslip and contract.is_beginning_of_month)) and not bool(payslip.payslip_run_id.extraordinary)",1,140,True,l10n_do_salary_rule.contrib_register_tss,0,
hr_rule_insurance_dependent,DEPA,base.main_company,l10n_do_salary_rule.hr_payroll_ss_deduction,Dependientes Adicionales,"
dependant_withholding = -(employee.dependents) * 1035.93

if contract.is_end_of_month:
    dependant_accumulation = abs(payslip.sum('DEPA', start_date, this_slip))
    result = dependant_withholding - dependant_accumulation
elif contract.is_beginning_of_month:
    result = dependant_withholding
elif contract.is_distributed:
    result = dependant_withholding / contract.payment_division
result_qty = employee.dependents
result_rate = 100 / result_qty
        ","
result = (bool(employee.dependents) and (bool(contract.is_distributed) or bool(last_payslip and contract.is_end_of_month) or bool(first_payslip and contract.is_beginning_of_month))) and not bool(payslip.payslip_run_id.extraordinary)",1,145,True,hr_payroll.contrib_register_employees,0,
hr_rule_dgii_trading,COTDGII,base.main_company,l10n_do_salary_rule.hr_payroll_trading_salary,Salario Cotizable - DGII,"
dgii_amount = APAGAR + categories.COMM + categories.OREM + (NLAB if rules.NLAB else 0) - abs(categories.TSSE)
dgii_allowances_accumulation = payslip.sum('APAGAR', start_date, this_slip) + payslip.sum('INC', start_date, this_slip) + payslip.sum('VAC', start_date, this_slip) + payslip.sum('HEL', start_date, this_slip) + payslip.sum('HEF', start_date, this_slip) + payslip.sum('HNI', start_date, this_slip) + payslip.sum('HEN', start_date, this_slip) + payslip.sum('BONOS', start_date, this_slip) + payslip.sum('COM', start_date, this_slip) - abs(payslip.sum('NLAB', start_date, this_slip)) - abs(payslip.sum('SFSE', start_date, this_slip)) - abs(payslip.sum('SVDSE', start_date, this_slip)) - abs(payslip.sum('DEPA', start_date, this_slip))

result = dgii_amount + dgii_allowances_accumulation
","
result = bool(last_payslip) and not bool(payslip.payslip_run_id.extraordinary)",1,150,False,,0,
hr_rule_dgii_calculated,SALDGII,base.main_company,l10n_do_salary_rule.hr_payroll_calculated_amount,Monto Calculado - DGII,"
dgii_amount = APAGAR + categories.COMM + categories.OREM + (NLAB if rules.NLAB else 0) - abs(categories.TSSE)
dgii_allowances_accumulation = payslip.sum('APAGAR', start_date, this_slip) + payslip.sum('INC', start_date, this_slip) + payslip.sum('VAC', start_date, this_slip) + payslip.sum('HEL', start_date, this_slip) + payslip.sum('HEF', start_date, this_slip) + payslip.sum('HNI', start_date, this_slip) + payslip.sum('HEN', start_date, this_slip) + payslip.sum('BONOS', start_date, this_slip) + payslip.sum('COM', start_date, this_slip) - abs(payslip.sum('NLAB', start_date, this_slip)) - abs(payslip.sum('SFSE', start_date, this_slip)) - abs(payslip.sum('SVDSE', start_date, this_slip)) - abs(payslip.sum('DEPA', start_date, this_slip))

if contract.is_end_of_month or contract.is_distributed:
    result = dgii_amount + dgii_allowances_accumulation
elif contract.is_beginning_of_month:
    dgii_amount = BASE + categories.OREM + (NLAB if rules.NLAB else 0) - abs(categories.TSSE)
    result = dgii_amount","
result = (bool(contract.is_distributed) or bool(last_payslip and contract.is_end_of_month) or bool(first_payslip and contract.is_beginning_of_month)) and not bool(payslip.payslip_run_id.extraordinary)",1,160,False,,0,
hr_rule_isr_employee,ISR,base.main_company,l10n_do_salary_rule.hr_payroll_income_deduction,Retención - Impuesto sobre la Renta (ISR),"
dgii_retention_accumulation = abs(payslip.sum('ISR', start_date, this_slip))

salary = SALDGII * 12
minimum = anual_minimum_salary
first_scale = 624329.00
second_scale = 867123.00
income_tax = 0

if salary <= first_scale:
    surplus = salary - (minimum + .01)
    income_tax =  surplus * 0.15

elif first_scale < salary <= second_scale:
    surplus = salary - (first_scale + .01)
    income_tax = 31216.00 + surplus * 0.20

elif salary > second_scale:
    surplus = salary - (second_scale + .01)
    income_tax = 79776.00 + surplus * 0.25

result = -(income_tax / 12 - dgii_retention_accumulation)
        ","
anual_minimum_salary = 416220.00

result = (True if rules.SALDGII and SALDGII * 12 > anual_minimum_salary else False) and not bool(payslip.payslip_run_id.extraordinary)",1,180,True,l10n_do_salary_rule.contrib_register_dgii,0,
hr_rule_infotep_trading,COTINF,base.main_company,l10n_do_salary_rule.hr_payroll_trading_salary,Salario Cotizable - INFOTEP,"
infotep_payslip = APAGAR + categories.COMM + (NLAB if rules.NLAB else 0)
infotep_accumulation = payslip.sum('APAGAR', start_date, this_slip) + payslip.sum('COM', start_date, this_slip) - abs(payslip.sum('NLAB', start_date, this_slip))
result = infotep_payslip + infotep_accumulation
","
result = bool(last_payslip) and not bool(payslip.payslip_run_id.extraordinary)",1,190,False,,0,
hr_rule_infotep_employee,INFE,base.main_company,l10n_do_salary_rule.hr_payroll_infotep_deduction,Retención - INFOTEP (Bonificación),"
if contract.is_end_of_month:
    result = -(BONOS - bonus_accumulation) * 0.005
elif contract.is_distributed or contract.is_beginning_of_month:
    result = -BONOS  * 0.005","
contract_and_date = bool(last_payslip and contract.is_end_of_month) or bool(first_payslip and contract.is_beginning_of_month)
has_bonus = bool(inputs.BONO and inputs.BONO.amount)
bonus_accumulation = abs(payslip.sum('BONOS', start_date, this_slip))

result =  bool(contract.is_distributed and has_bonus) or bool(contract_and_date and (bonus_accumulation or has_bonus)) and not bool(payslip.payslip_run_id.extraordinary)
",1,210,True,l10n_do_salary_rule.contrib_register_infotep,0,
hr_rule_sfs_contribution,SFSC,base.main_company,l10n_do_salary_rule.hr_payroll_ss_contribution,Contribución - Seguro Familiar de Salud (SFS),"
sfs_maximum = payslip.env[""hr.payslip""].get_quotation_calculation(""SFS"").value
sfs_percentage = payslip.env[""hr.payslip""].get_quotation_calculation(""SFS"").contrib / 100
if employee.is_naturalized:
    if COTSS <= sfs_maximum:
        result = COTSS * sfs_percentage
    else:
         result = sfs_maximum * sfs_percentage
else:
    result = 0","
result = bool(last_payslip) and not bool(payslip.payslip_run_id.extraordinary)",1,300,False,l10n_do_salary_rule.contrib_register_tss,0,
hr_rule_afp_contribution,SVDSC,base.main_company,l10n_do_salary_rule.hr_payroll_ss_contribution,Contribución - Fondo de Pensiones (AFP/SVDS),"
afp_maximum = payslip.env[""hr.payslip""].get_quotation_calculation(""SVDS"").value
afp_percentage = payslip.env[""hr.payslip""].get_quotation_calculation(""SVDS"").contrib / 100
if employee.is_naturalized:
    if COTSS <= afp_maximum:
        result = COTSS * afp_percentage
    else:
        result = afp_maximum * afp_percentage
else:
    result = 0","
result = bool(last_payslip) and not bool(payslip.payslip_run_id.extraordinary)",1,310,False,l10n_do_salary_rule.contrib_register_tss,0,
hr_rule_srl_contribution,SRLC,base.main_company,l10n_do_salary_rule.hr_payroll_ss_contribution,Contribución - Seguro de Riesgos Laborales (SRL),"
srl_maximum = payslip.env[""hr.payslip""].get_quotation_calculation(""SRL"").value
srl_variable_percentage = payslip.env[""hr.payslip""].get_quotation_calculation(""SRL"").contrib / 100
if employee.is_naturalized:
    if COTSS <= srl_maximum:
        result = COTSS * srl_variable_percentage
    else:
        result = srl_maximum * srl_variable_percentage
else:
    result = 0","
result = bool(last_payslip) and not bool(payslip.payslip_run_id.extraordinary)",1,320,False,l10n_do_salary_rule.contrib_register_tss,0,
hr_rule_infotep_contribution,INFC,base.main_company,l10n_do_salary_rule.hr_payroll_infotep_contribution,Contribución - INFOTEP,result = COTINF * 0.01,result = bool(last_payslip) and not bool(payslip.payslip_run_id.extraordinary),1,340,False,l10n_do_salary_rule.contrib_register_infotep,0,
hr_rule_dgii_exempt,INEX,base.main_company,l10n_do_salary_rule.hr_payroll_exempt_alw,Otros Ingresos Exentos,result = inputs.INEX and inputs.INEX.amount,result = bool(inputs.INEX and inputs.INEX.amount),1,350,False,,0,
hr_rule_employee_refund,REEM,base.main_company,l10n_do_salary_rule.hr_payroll_exempt_alw,Reembolsos,result = inputs.REEM and inputs.REEM.amount,result = bool(inputs.REEM and inputs.REEM.amount),1,351,False,,0,
hr_rule_isr_employee_credit,ISRCRED,base.main_company,l10n_do_salary_rule.hr_payroll_exempt_alw,Saldo a Favor del ISR,result = inputs.ISRCRED and inputs.ISRCRED.amount,result = bool(inputs.ISRCRED and inputs.ISRCRED.amount),1,400,True,l10n_do_salary_rule.contrib_register_dgii,0,
hr_rule_christmas_bonus,REPA,base.main_company,l10n_do_salary_rule.hr_payroll_exempt_alw,Regalía Pascual,result = 0,result = False,1,410,True,hr_payroll.contrib_register_employees,0,
hr_rule_pre_warning,PREA,base.main_company,l10n_do_salary_rule.hr_payroll_exempt_alw,Pre-aviso,result = 0,result = False,1,420,True,,0,
hr_rule_insurance_complementary,SEC,base.main_company,l10n_do_salary_rule.hr_payroll_other_deduction,Seguro Complementario,result = -(inputs.SEC and inputs.SEC.amount),result = bool(inputs.SEC and inputs.SEC.amount),1,430,True,,0,
hr_rule_severance_pay,CESAN,base.main_company,l10n_do_salary_rule.hr_payroll_exempt_alw,Cesantía,result = 0,result = False,1,430,False,,0,
hr_rule_insurance_live,SEV,base.main_company,l10n_do_salary_rule.hr_payroll_other_deduction,Seguro de Vida,result = -(inputs.SEV and inputs.SEV.amount),result = bool(inputs.SEV and inputs.SEV.amount),1,440,True,,0,
hr_rule_employee_exit,SALIDA,base.main_company,l10n_do_salary_rule.hr_payroll_exempt_alw,Prestaciones,"
employee_exit = REPA + PREA + CESA + ISRCRED
benefits_accumulation = payslip.sum('REPA', start_date, this_slip) + payslip.sum('PREA', start_date, this_slip) + payslip.sum('CESAN', start_date, this_slip) + payslip.sum('ISRCRED', start_date, this_slip)

if contract.is_end_of_month:
    result = employee_exit + benefits_accumulation
elif contract.is_distributed or contract.is_beginning_of_month:
    result = employee_exit","
result = bool(contract.is_distributed) or bool(last_payslip and contract.is_end_of_month) or bool(first_payslip and contract.is_beginning_of_month)",1,440,False,,0,
hr_rule_employee_loan,PRE,base.main_company,l10n_do_salary_rule.hr_payroll_loan_deduction,Préstamos,result = -(inputs.PRE and inputs.PRE.amount),result = bool(inputs.PRE and inputs.PRE.amount) and not bool(payslip.payslip_run_id.extraordinary),1,450,True,hr_payroll.contrib_register_employees,0,
hr_rule_coop_loan,COOP,base.main_company,l10n_do_salary_rule.hr_payroll_loan_deduction,Cooperativa - Préstamo,result = -(inputs.COOP and inputs.COOP.amount),result = bool(inputs.COOP and inputs.COOP.amount) and not bool(payslip.payslip_run_id.extraordinary),1,451,True,hr_payroll.contrib_register_employees,0,
hr_rule_coop_savings,COOA,base.main_company,l10n_do_salary_rule.hr_payroll_loan_deduction,Cooperativa - Ahorro,result = -(inputs.COOA and inputs.COOA.amount),result = bool(inputs.COOA and inputs.COOA.amount) and not bool(payslip.payslip_run_id.extraordinary),1,451,True,hr_payroll.contrib_register_employees,0,
hr_rule_employee_gas,COMB,base.main_company,l10n_do_salary_rule.hr_payroll_other_deduction,Combustible,result = -(inputs.COMB and inputs.COMB.amount),result = bool(inputs.COMB and inputs.COMB.amount),1,455,True,hr_payroll.contrib_register_employees,0,
hr_rule_employee_food,ALM,base.main_company,l10n_do_salary_rule.hr_payroll_other_deduction,Almuerzo,result = -(inputs.ALM and inputs.ALM.amount),result = bool(inputs.ALM and inputs.ALM.amount),1,456,True,hr_payroll.contrib_register_employees,0,
hr_rule_employee_uniform,UNIF,base.main_company,l10n_do_salary_rule.hr_payroll_other_deduction,Uniformes,result = -(inputs.UNIF and inputs.UNIF.amount),result = bool(inputs.UNIF and inputs.UNIF.amount),1,460,True,hr_payroll.contrib_register_employees,0,
hr_rule_employee_unbalance,CAJA,base.main_company,l10n_do_salary_rule.hr_payroll_other_deduction,Faltante en Caja,result = -(inputs.CAJA and inputs.CAJA.amount),result = bool(inputs.CAJA and inputs.CAJA.amount),1,470,True,hr_payroll.contrib_register_employees,0,
hr_rule_employee_other,DDSL,base.main_company,l10n_do_salary_rule.hr_payroll_other_deduction,Otras Deducciones,result = -(inputs.DDSL and inputs.DDSL.amount),result = bool(inputs.DDSL and inputs.DDSL.amount),1,490,True,hr_payroll.contrib_register_employees,0,
hr_payroll.hr_rule_net,NET,base.main_company,hr_payroll.NET,Salario Neto,result = (BRUTO if rules.BRUTO else 0) - abs(categories.RET) - abs(categories.DED) + categories.INEX,"
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",1,500,True,hr_payroll.contrib_register_employees,0,
